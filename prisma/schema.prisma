// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  meals         Meal[]
  workouts      Workout[]
  programs      Program[]
  sets          Set[]
  exercises     Exercise[]
  habits        Habit[]
  habitEntries  HabitEntry[]

  @@map("users")
}

model Meal {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model Workout {
  id          String   @id @default(cuid())
  description String?
  note        String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  sets Set[]

  @@map("workouts")
}

model Set {
  id            String    @id @default(cuid())
  exerciseTitle String?   @map("exercise_title")
  reps          Int?
  weight        Int?
  createdAt     DateTime  @default(now())
  workout       Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId     String
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  exerciseId    String?
  exercise      Exercise? @relation(fields: [exerciseId], references: [id])

  @@map("workout_entries")
}

model Program {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("programs")
}

model Exercise {
  id        String   @id @default(cuid())
  title     String
  slug      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets      Set[]

  @@map("exercises")
}

model Habit {
  id           String       @id @default(cuid())
  title        String
  slug         String
  createdAt    DateTime     @default(now())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitEntries HabitEntry[]

  @@map("habits")
}

model HabitEntry {
  id          String   @id @default(cuid())
  completedAt DateTime
  userId      String
  habitId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("habit_entries")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
